<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ======================================================== -->
<!-- File    : REMUS_use_case.xsl                             -->
<!-- Content : REM XSLT for subjects at US - use case         -->
<!-- Author  : Amador Durán Toro                              -->
<!-- Date    : 2021/09/11                                     -->
<!-- Version : 3.1                                            -->
<!-- ======================================================== -->

<!-- ======================================================== -->
<!-- exclude-result-prefixes="rem" must be set in all files   -->
<!-- to avoid xmlsn:rem="..." to appear in HTML tags.         -->
<!-- ======================================================== -->

<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:rem="http://rem.lsi.us.es"
    exclude-result-prefixes="rem"
>

<!-- ============================================== -->
<!-- rem:useCase template                           -->
<!-- ============================================== -->
<!-- Note the use of colspan=2                      -->

<xsl:template match="rem:useCase">
    <xsl:variable name="span" select="2"/>
    <xsl:variable name="is_abstract" select="rem:isAbstract"/>

    <div id="{@oid}">
        <table class="use_case remus_table">

            <xsl:call-template name="generate_expanded_header">
                <xsl:with-param name="span" select="$span"/>
                <xsl:with-param name="postfix">
                    <xsl:if test="$is_abstract"> (<xsl:value-of select="$rem:lang_abstract"/>)</xsl:if>
                </xsl:with-param>
            </xsl:call-template>

            <!-- description -->
            <xsl:call-template name="generate_markdown_row">
                <xsl:with-param name="label"  select="$rem:lang_description"/>
                <xsl:with-param name="prefix" select="$rem:lang_uc_lp_01"/>
                <xsl:with-param name="content">
                    <xsl:call-template name="generate_description">
                        <xsl:with-param name="is_abstract" select="$is_abstract"/>
                    </xsl:call-template>
                </xsl:with-param>
                <xsl:with-param name="mode" select="'paragraph'"/>
                <xsl:with-param name="span" select="$span"/>
            </xsl:call-template>

            <!-- precondition -->
            <xsl:call-template name="generate_markdown_row">
                <xsl:with-param name="label" select="$rem:lang_precondition"/>
                <xsl:with-param name="content" select="rem:precondition"/>
                <xsl:with-param name="mode" select="'paragraph'"/>
                <xsl:with-param name="span" select="$span"/>
            </xsl:call-template>

            <!-- steps -->
            <xsl:call-template name="generate_steps"/>

            <!-- postcondition -->
            <xsl:call-template name="generate_markdown_row">
                <xsl:with-param name="label" select="$rem:lang_postcondition"/>
                <xsl:with-param name="content" select="rem:postcondition"/>
                <xsl:with-param name="mode" select="'paragraph'"/>
                <xsl:with-param name="span" select="$span"/>
            </xsl:call-template>

            <!-- exceptions -->
            <xsl:call-template name="generate_exceptions"/>

            <!-- performances -->
            <!-- performance of system actions in exceptions are not displayed -->
            <!-- they were not in the default template                         -->
            <xsl:call-template name="generate_performances"/>

            <!-- expected frequency -->
            <xsl:call-template name="generate_frequency"/>

            <xsl:call-template name="generate_priority_rows">
                <xsl:with-param name="span" select="$span"/>
            </xsl:call-template>

            <xsl:call-template name="generate_comments_row">
                <xsl:with-param name="span" select="$span"/>
            </xsl:call-template>

        </table>
    </div>
</xsl:template>

<!-- ============================================== -->
<!-- generate_description template                  -->
<!-- ============================================== -->

<!-- The content generated by this template will be         -->
<!-- processed in markdown mode in generate_markdown.       -->
<!-- All apply-templates must be called in "markdown" mode. -->

<xsl:template name="generate_description">
    <xsl:param name="is_abstract" select="false()"/>

    <xsl:choose>
        <xsl:when test="$is_abstract">
            <xsl:value-of select="$rem:lang_uc_lp_02"/>
            <xsl:text> </xsl:text>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$rem:lang_uc_lp_03"/>
            <xsl:text> </xsl:text>
            <span class="triggering_event">
                <xsl:apply-templates select="rem:triggeringEvent" mode="markdown"/>
            </span>
        </xsl:otherwise>
    </xsl:choose>

    <xsl:choose>
        <xsl:when test="//rem:useCaseAction[@useCase=current()/@oid]">
            <xsl:if test="not($is_abstract)">
                <xsl:text> </xsl:text>
                <xsl:value-of select="$rem:lang_uc_lp_04"/>
                <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:for-each select="//rem:useCase[.//rem:useCaseAction[@useCase=current()/@oid]]">
                <xsl:sort select="@oid"/>
                <a href="#{@oid}">[<xsl:value-of select="@oid"/>] <xsl:apply-templates select="rem:name"/></a><xsl:if test="not(position()=last())">, </xsl:if>
            </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
            <xsl:if test="$is_abstract"><rem:tbd/></xsl:if>
        </xsl:otherwise>
    </xsl:choose>
    <!-- add the final period only if triggering event is simple, -->
    <!-- no complex markdown insides (detected by <br> elements)  -->
    <xsl:if test="not(rem:triggeringEvent/br)">
        <xsl:text>. </xsl:text>
    </xsl:if>
</xsl:template>

<!-- ============================================== -->
<!-- generate_steps template                        -->
<!-- ============================================== -->

<xsl:template name="generate_steps">
    <xsl:if test="rem:step">
        <tr>
            <th rowspan="{count(rem:step) + 1}">
                <xsl:value-of select="$rem:lang_ordinary_sequence"/>
            </th>

            <th class="step_number_column">
                <xsl:value-of select="$rem:lang_step"/>
            </th>

            <th class="step_action_column">
                <xsl:value-of select="$rem:lang_action"/>
            </th>
        </tr>

        <xsl:for-each select="rem:step">
            <xsl:sort select="rem:number" data-type="number"/>
            <xsl:apply-templates select="."/>
        </xsl:for-each>
    </xsl:if>
</xsl:template>

<!-- ============================================== -->
<!-- rem:step template                              -->
<!-- ============================================== -->

<xsl:template match="rem:step">

    <xsl:variable name="prefix">
        <xsl:if test="rem:condition">
            <xsl:value-of select="$rem:lang_if"/>
            <xsl:text> </xsl:text>
            <xsl:apply-templates select="rem:condition" mode="markdown"/>
            <xsl:text>, </xsl:text>
        </xsl:if>
    </xsl:variable>

    <xsl:variable name="content">
        <xsl:apply-templates select="rem:systemAction|rem:actorAction|rem:useCaseAction"/>
        <xsl:text>. </xsl:text>
    </xsl:variable>

    <xsl:variable name="comments" select="normalize-space(rem:comments)"/>
    <xsl:variable name="show_comments" select="($comments != $rem:lang_none) and (string-length($comments) > 0)"/>
    <xsl:variable name="postfix">
        <xsl:if test="$show_comments">
            <xsl:text> (_</xsl:text>
            <xsl:copy-of select="rem:comments"/>
            <xsl:text>_)</xsl:text>
        </xsl:if>
    </xsl:variable>

    <xsl:call-template name="generate_markdown_row">
        <xsl:with-param name="oid" select="@oid"/>
        <xsl:with-param name="label" select="rem:number"/>
        <xsl:with-param name="label_class" select="'step_number'"/>
        <xsl:with-param name="prefix" select="$prefix"/>
        <xsl:with-param name="content" select="$content"/>
        <xsl:with-param name="postfix" select="$postfix"/>
        <xsl:with-param name="mode" select="'paragraph'"/>
    </xsl:call-template>

</xsl:template>

<!-- ============================================== -->
<!-- rem:action templates                           -->
<!-- ============================================== -->

<!-- The content generated by this template will be         -->
<!-- processed in markdown mode in generate_markdown.       -->
<!-- That's why links are genereated in markdown.           -->
<!-- All apply-templates must be called in "markdown" mode. -->

<xsl:template match="rem:systemAction">
    <xsl:choose>
        <xsl:when test="not(../rem:condition)"><xsl:value-of select="$rem:lang_The"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="$rem:lang_the"/></xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <xsl:value-of select="$rem:lang_system"/>
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="rem:description" mode="markdown"/>
</xsl:template>

<xsl:template match="rem:actorAction">
    <xsl:choose>
        <xsl:when test="not(../rem:condition)"><xsl:value-of select="$rem:lang_The_actor"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="$rem:lang_the_actor"/></xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- <a href="#{@actor}"><xsl:value-of select="id(@actor)/rem:name"/> (<xsl:value-of select="@actor"/>)</a> -->
    [<xsl:value-of select="id(@actor)/rem:name"/> \(<xsl:value-of select="@actor"/>\)](#<xsl:value-of select="@actor"/>)
    <xsl:text> </xsl:text>
    <xsl:apply-templates select="rem:description" mode="markdown"/>
</xsl:template>

<xsl:template match="rem:useCaseAction">
    <xsl:choose>
        <xsl:when test="not(../rem:condition)"><xsl:value-of select="$rem:lang_uc_lp_05"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="$rem:lang_uc_lp_06"/></xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
    <!-- <a href="#{@useCase}"><xsl:value-of select="id(@useCase)/rem:name"/> (<xsl:value-of select="@useCase"/>)</a> -->
    [<xsl:value-of select="id(@useCase)/rem:name"/> \(<xsl:value-of select="@useCase"/>\)](#<xsl:value-of select="@useCase"/>)<!--        
  --><xsl:if test="string-length($rem:lang_uc_lp_07)">
        <xsl:text> </xsl:text>
        <xsl:value-of select="$rem:lang_uc_lp_07"/>
    </xsl:if>
</xsl:template>

<!-- ============================================== -->
<!-- generate_exceptions template                   -->
<!-- ============================================== -->

<xsl:template name="generate_exceptions">
    <xsl:if test="rem:step/rem:stepException">
        <tr>
            <th rowspan="{count(rem:step/rem:stepException) + 1}">
                <xsl:value-of select="$rem:lang_exceptions"/>
            </th>

            <th class="step_number_column">
                <xsl:value-of select="$rem:lang_step"/>
            </th>

            <th class="exception_action_column">
                <xsl:value-of select="$rem:lang_action"/>
            </th>
        </tr>

        <xsl:for-each select="rem:step/rem:stepException">
            <xsl:sort select="../rem:number" data-type="number"/>
            <xsl:apply-templates select="."/>
        </xsl:for-each>
    </xsl:if>
</xsl:template>

<!-- ============================================== -->
<!-- rem:stepException template                     -->
<!-- ============================================== -->

<!-- The content generated by this template will be         -->
<!-- processed in markdown mode in generate_markdown.       -->
<!-- All apply-templates must be called in "markdown" mode. -->

<xsl:template match="rem:stepException">

    <xsl:variable name="prefix">
        <xsl:if test="rem:condition">
            <xsl:value-of select="$rem:lang_if"/>
            <xsl:text> </xsl:text>
            <xsl:apply-templates select="rem:condition" mode="markdown"/>
            <xsl:text>, </xsl:text>
        </xsl:if>
    </xsl:variable>

    <xsl:variable name="content">
        <xsl:apply-templates select="rem:systemAction|rem:actorAction|rem:useCaseAction"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="$rem:lang_then_this_use_case"/>
        <xsl:text> </xsl:text>
        <span class="exception_termination">
            <xsl:choose>
                <xsl:when test="rem:termination/@value">
                    <xsl:apply-templates select="id(rem:termination/@value)/rem:name"/>
                </xsl:when>
                <xsl:otherwise><xsl:apply-templates select="rem:termination/rem:tbd" mode="markdown"/></xsl:otherwise>
            </xsl:choose>
        </span>
    </xsl:variable>

    <xsl:variable name="comments" select="normalize-space(rem:comments)"/>
    <xsl:variable name="show_comments" select="($comments != $rem:lang_none) and (string-length($comments) > 0)"/>
    <xsl:variable name="postfix">
        <xsl:if test="$show_comments">
            <xsl:text> (_</xsl:text>
            <xsl:copy-of select="rem:comments"/>
            <xsl:text>_)</xsl:text>
        </xsl:if>
        <xsl:text>. </xsl:text>
    </xsl:variable>

    <xsl:call-template name="generate_markdown_row">
        <xsl:with-param name="oid" select="@oid"/>
        <xsl:with-param name="label" select="../rem:number"/>
        <xsl:with-param name="label_class" select="'step_number'"/>
        <xsl:with-param name="prefix" select="$prefix"/>
        <xsl:with-param name="content" select="$content"/>
        <xsl:with-param name="postfix" select="$postfix"/>
        <xsl:with-param name="mode" select="'paragraph'"/>
    </xsl:call-template>

</xsl:template>

<!-- ============================================== -->
<!-- generate_performances template                 -->
<!-- ============================================== -->

<xsl:template name="generate_performances">
    <xsl:if test="rem:step/rem:systemAction/rem:performance">

        <tr>
            <th rowspan="{count(rem:step/rem:systemAction/rem:performance) + 1}">
                <xsl:value-of select="$rem:lang_performance"/>
            </th>

            <th>
                <xsl:value-of select="$rem:lang_step"/>
            </th>

            <th class="performance_time_column">
                <xsl:value-of select="$rem:lang_maximum_time"/>
            </th>
        </tr>

        <xsl:for-each select="rem:step/rem:systemAction/rem:performance">
            <xsl:sort select="../../rem:number" data-type="number"/>
            <xsl:apply-templates select="."/>
        </xsl:for-each>

    </xsl:if>
</xsl:template>

<!-- ============================================== -->
<!-- rem:performance template                       -->
<!-- ============================================== -->

<xsl:template match="rem:step/rem:systemAction/rem:performance">
    <tr>
        <th class="step_number">
            <xsl:value-of select="../../rem:number"/>
        </th>
        <td>
            <xsl:value-of select="rem:value"/>
            <xsl:text> </xsl:text>
            <xsl:apply-templates select="id(rem:timeUnit/@value)/rem:name"/>
        </td>
    </tr>
</xsl:template>

<!-- ============================================== -->
<!-- generate_frequency template                    -->
<!-- ============================================== -->

<xsl:template name="generate_frequency">
    <xsl:if test="not(rem:frequency/rem:tbd)">
        <tr>
            <th>
                <xsl:value-of select="$rem:lang_expected_frequency"/>
            </th>
                <td colspan="2">
                    <xsl:value-of select="rem:frequency/rem:value"/>
                    <xsl:text> </xsl:text>
                    <xsl:value-of select="$rem:lang_times_per"/>
                    <xsl:text> </xsl:text>
                    <xsl:value-of select="id(rem:frequency/rem:timeUnit/@value)/rem:name"/>
            </td>
        </tr>
    </xsl:if>
</xsl:template>

</xsl:stylesheet>
